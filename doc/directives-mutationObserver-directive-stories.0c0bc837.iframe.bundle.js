"use strict";(self.webpackChunkcomponents_angular=self.webpackChunkcomponents_angular||[]).push([[1433],{"./stories/directives/mutationObserver.directive.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{AttributeChanges:()=>AttributeChanges,ChildListChanges:()=>ChildListChanges,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var _storybook_angular__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@storybook/angular/dist/index.mjs"),_Directives__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/directives/index.ts"),lodash__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/lodash/lodash.js"),_angular_common__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@angular/common/fesm2022/common_module-Dx7dWex5.mjs"),ng_zorro_antd_button__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/ng-zorro-antd/fesm2022/ng-zorro-antd-button.mjs"),ng_zorro_antd_input__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/ng-zorro-antd/fesm2022/ng-zorro-antd-input.mjs");const __WEBPACK_DEFAULT_EXPORT__={title:"Directives/MutationObserver",component:_Directives__WEBPACK_IMPORTED_MODULE_1__.d,decorators:[(0,_storybook_angular__WEBPACK_IMPORTED_MODULE_0__.moduleMetadata)({imports:[_angular_common__WEBPACK_IMPORTED_MODULE_3__.MD,ng_zorro_antd_input__WEBPACK_IMPORTED_MODULE_4__.j,ng_zorro_antd_button__WEBPACK_IMPORTED_MODULE_5__.Zw]})]},AttributeChanges={render:()=>({props:{padding:"10px",backgroundColor:"#ffffff",domChanges:[],reset:function(){this.padding="10px",this.backgroundColor="#ffffff",this.domChanges=this.domChanges||[]},onMutationChange:function(mutation){const change={...(0,lodash__WEBPACK_IMPORTED_MODULE_2__.pick)(mutation,["type","attributeName","oldValue"]),attributeNow:mutation.target.getAttribute(mutation.attributeName)};this.domChanges.push(change)}},template:'\n            <div class="demo-container">\n                <input appMutationObserver \n                    (mutationChange)="onMutationChange($event)" nz-input placeholder="Watch me change!"\n                    [style.padding]="padding"\n                    [style.backgroundColor]="backgroundColor"/>\n                \n                <div class="flex gap-md">\n                    <button nz-button nzType="primary" (click)="padding = \'20px\'">Add Padding</button>\n                    <button nz-button nzType="primary" (click)="backgroundColor = \'#ff0000\'">Change Color</button>\n                    <button nz-button nzType="default" (click)="reset()">Clear</button>\n                </div>\n            </div>\n            <div>\n                <table>\n                    <tr>\n                        <th>Type</th>\n                        <th>Attribute</th>\n                        <th>Target</th>\n                        <th>Old Value</th>\n                    </tr>\n                    <tr *ngFor="let change of domChanges">\n                        <td class="padding-xs">{{change.type}}</td>\n                        <td class="padding-xs">{{change.attributeName}}</td>\n                        <td class="padding-xs">{{change.attributeNow}}</td>\n                        <td class="padding-xs">{{change.oldValue}}</td>\n                    </tr>\n                </table>\n            </div>\n        '})},ChildListChanges={render:args=>({props:{items:["Item 1","Item 2","Item 3"],domChanges:[],reset:function(){this.items=["Item 1","Item 2","Item 3"],this.domChanges=this.domChanges||[]},onMutationChange:function(mutation){const change={type:mutation.type,addedNodes:[...mutation.addedNodes].map((d=>d.innerText)).join(", "),removedNodes:[...mutation.removedNodes].map((d=>d.innerText)).join(", ")};this.domChanges.push(change)},addItem:function(){this.items.push(`Item ${this.items.length+1}`)},removeItem:function(){this.items.pop()}},template:'\n            <div class="demo-container">\n                <div class="bordered padding-md"\n                    appMutationObserver \n                    (mutationChange)="onMutationChange($event)"\n                >\n                    <div *ngFor="let item of items">{{item}}</div>\n                </div>\n                \n                <div class="flex gap-md">\n                    <button nz-button nzType="primary" (click)="addItem()">Add Item</button>\n                    <button nz-button nzType="primary" [disabled]="!items.length" (click)="removeItem()">Remove Item</button>\n                </div>\n            </div>\n            <div class="padding-top-lg">\n                <table>\n                    <tr>\n                        <th>Type</th>\n                        <th>addedNodes</th>\n                        <th>removedNodes</th>\n                    </tr>\n                    <tr *ngFor="let change of domChanges">\n                        <td class="padding-xs">{{change.type}}</td>\n                        <td class="padding-xs">{{change.addedNodes}}</td>\n                        <td class="padding-xs">{{change.removedNodes}}</td>\n                    </tr>\n                </table>\n            </div>\n        '})},__namedExportsOrder=["AttributeChanges","ChildListChanges"];AttributeChanges.parameters={...AttributeChanges.parameters,docs:{...AttributeChanges.parameters?.docs,source:{originalSource:'{\n  render: () => ({\n    props: {\n      padding: \'10px\',\n      backgroundColor: \'#ffffff\',\n      domChanges: [],\n      reset: function () {\n        this.padding = \'10px\';\n        this.backgroundColor = \'#ffffff\';\n        this.domChanges = this.domChanges || [];\n      },\n      onMutationChange: function (mutation: MutationRecord) {\n        const change = {\n          ...pick(mutation, [\'type\', \'attributeName\', \'oldValue\']),\n          attributeNow: (mutation.target as HTMLElement).getAttribute(mutation.attributeName as string)\n        };\n        this.domChanges.push(change);\n      }\n    },\n    template: `\n            <div class="demo-container">\n                <input appMutationObserver \n                    (mutationChange)="onMutationChange($event)" nz-input placeholder="Watch me change!"\n                    [style.padding]="padding"\n                    [style.backgroundColor]="backgroundColor"/>\n                \n                <div class="flex gap-md">\n                    <button nz-button nzType="primary" (click)="padding = \'20px\'">Add Padding</button>\n                    <button nz-button nzType="primary" (click)="backgroundColor = \'#ff0000\'">Change Color</button>\n                    <button nz-button nzType="default" (click)="reset()">Clear</button>\n                </div>\n            </div>\n            <div>\n                <table>\n                    <tr>\n                        <th>Type</th>\n                        <th>Attribute</th>\n                        <th>Target</th>\n                        <th>Old Value</th>\n                    </tr>\n                    <tr *ngFor="let change of domChanges">\n                        <td class="padding-xs">{{change.type}}</td>\n                        <td class="padding-xs">{{change.attributeName}}</td>\n                        <td class="padding-xs">{{change.attributeNow}}</td>\n                        <td class="padding-xs">{{change.oldValue}}</td>\n                    </tr>\n                </table>\n            </div>\n        `\n  })\n}',...AttributeChanges.parameters?.docs?.source},description:{story:"Basic usage example showing how to monitor attribute changes",...AttributeChanges.parameters?.docs?.description}}},ChildListChanges.parameters={...ChildListChanges.parameters,docs:{...ChildListChanges.parameters?.docs,source:{originalSource:'{\n  render: args => ({\n    props: {\n      items: [\'Item 1\', \'Item 2\', \'Item 3\'],\n      domChanges: [],\n      reset: function () {\n        this.items = [\'Item 1\', \'Item 2\', \'Item 3\'];\n        this.domChanges = this.domChanges || [];\n      },\n      onMutationChange: function (mutation: MutationRecord) {\n        const change = {\n          type: mutation.type,\n          addedNodes: [...mutation.addedNodes].map(d => (d as HTMLElement).innerText).join(\', \'),\n          removedNodes: [...mutation.removedNodes].map(d => (d as HTMLElement).innerText).join(\', \')\n        };\n        this.domChanges.push(change);\n      },\n      addItem: function () {\n        this.items.push(`Item ${this.items.length + 1}`);\n      },\n      removeItem: function () {\n        this.items.pop();\n      }\n    },\n    template: `\n            <div class="demo-container">\n                <div class="bordered padding-md"\n                    appMutationObserver \n                    (mutationChange)="onMutationChange($event)"\n                >\n                    <div *ngFor="let item of items">{{item}}</div>\n                </div>\n                \n                <div class="flex gap-md">\n                    <button nz-button nzType="primary" (click)="addItem()">Add Item</button>\n                    <button nz-button nzType="primary" [disabled]="!items.length" (click)="removeItem()">Remove Item</button>\n                </div>\n            </div>\n            <div class="padding-top-lg">\n                <table>\n                    <tr>\n                        <th>Type</th>\n                        <th>addedNodes</th>\n                        <th>removedNodes</th>\n                    </tr>\n                    <tr *ngFor="let change of domChanges">\n                        <td class="padding-xs">{{change.type}}</td>\n                        <td class="padding-xs">{{change.addedNodes}}</td>\n                        <td class="padding-xs">{{change.removedNodes}}</td>\n                    </tr>\n                </table>\n            </div>\n        `\n  })\n}',...ChildListChanges.parameters?.docs?.source},description:{story:"Example showing how to monitor child list changes",...ChildListChanges.parameters?.docs?.description}}}}}]);