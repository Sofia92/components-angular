"use strict";(self.webpackChunkcomponents_angular=self.webpackChunkcomponents_angular||[]).push([[744],{"./stories/components/autocomplete.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Basic:()=>Basic,CustomMode:()=>CustomMode,LoadingState:()=>LoadingState,WithSubSuggestions:()=>WithSubSuggestions,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var _storybook_angular__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@storybook/angular/dist/index.mjs"),_Components__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/components/index.ts"),_angular_common__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@angular/common/fesm2022/common_module-CBrzkrmd.mjs"),_angular_forms__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@angular/forms/fesm2022/forms.mjs");const __WEBPACK_DEFAULT_EXPORT__={title:"Components/Autocomplete",component:_Components__WEBPACK_IMPORTED_MODULE_1__.B$,argTypes:{placeholder:{control:"text"},loading:{control:"boolean"},isCustom:{control:"boolean"},suggestions:{control:"object"},subSuggestions:{control:"object"},tips:{control:"object"},selectedValue:{control:"text"}},decorators:[(0,_storybook_angular__WEBPACK_IMPORTED_MODULE_0__.moduleMetadata)({imports:[_angular_common__WEBPACK_IMPORTED_MODULE_2__.MD,_angular_forms__WEBPACK_IMPORTED_MODULE_3__.YN]})]},Template=args=>({component:_Components__WEBPACK_IMPORTED_MODULE_1__.B$,props:args,template:'\n    <div style="width: 300px; margin: 20px;">\n      <input LibAutocomplete\n        [placeholder]="placeholder"\n        [loading]="loading"\n        [isCustom]="isCustom"\n        [suggestions]="suggestions"\n        [subSuggestions]="subSuggestions"\n        [tips]="tips"\n        [selectedValue]="selectedValue"\n        (changeEmitter)="onChange($event)"\n        (changeClickEmitter)="onClick($event)"\n      />\n    </div>\n  '}),Basic=Template.bind({});Basic.args={placeholder:"请输入搜索内容",loading:!1,isCustom:!1,suggestions:["选项1","选项2","选项3"],subSuggestions:[],tips:[],selectedValue:""};const WithSubSuggestions=Template.bind({});WithSubSuggestions.args={placeholder:"请输入搜索内容",loading:!1,isCustom:!1,suggestions:["北京","上海","广州"],subSuggestions:["Beijing","Shanghai","Guangzhou"],tips:["首都","经济中心","南方城市"],selectedValue:""};const CustomMode=Template.bind({});CustomMode.args={placeholder:"请输入搜索内容",loading:!1,isCustom:!0,suggestions:["ID1","ID2","ID3"],subSuggestions:["自定义内容1","自定义内容2","自定义内容3"],tips:["提示1","提示2","提示3"],selectedValue:""};const LoadingState=Template.bind({});LoadingState.args={placeholder:"请输入搜索内容",loading:!0,isCustom:!1,suggestions:[],subSuggestions:[],tips:[],selectedValue:""};const __namedExportsOrder=["Basic","WithSubSuggestions","CustomMode","LoadingState"];Basic.parameters={...Basic.parameters,docs:{...Basic.parameters?.docs,source:{originalSource:'args => ({\n  component: LibAutocompleteComponent,\n  props: args,\n  template: `\n    <div style="width: 300px; margin: 20px;">\n      <input LibAutocomplete\n        [placeholder]="placeholder"\n        [loading]="loading"\n        [isCustom]="isCustom"\n        [suggestions]="suggestions"\n        [subSuggestions]="subSuggestions"\n        [tips]="tips"\n        [selectedValue]="selectedValue"\n        (changeEmitter)="onChange($event)"\n        (changeClickEmitter)="onClick($event)"\n      />\n    </div>\n  `\n})',...Basic.parameters?.docs?.source}}},WithSubSuggestions.parameters={...WithSubSuggestions.parameters,docs:{...WithSubSuggestions.parameters?.docs,source:{originalSource:'args => ({\n  component: LibAutocompleteComponent,\n  props: args,\n  template: `\n    <div style="width: 300px; margin: 20px;">\n      <input LibAutocomplete\n        [placeholder]="placeholder"\n        [loading]="loading"\n        [isCustom]="isCustom"\n        [suggestions]="suggestions"\n        [subSuggestions]="subSuggestions"\n        [tips]="tips"\n        [selectedValue]="selectedValue"\n        (changeEmitter)="onChange($event)"\n        (changeClickEmitter)="onClick($event)"\n      />\n    </div>\n  `\n})',...WithSubSuggestions.parameters?.docs?.source}}},CustomMode.parameters={...CustomMode.parameters,docs:{...CustomMode.parameters?.docs,source:{originalSource:'args => ({\n  component: LibAutocompleteComponent,\n  props: args,\n  template: `\n    <div style="width: 300px; margin: 20px;">\n      <input LibAutocomplete\n        [placeholder]="placeholder"\n        [loading]="loading"\n        [isCustom]="isCustom"\n        [suggestions]="suggestions"\n        [subSuggestions]="subSuggestions"\n        [tips]="tips"\n        [selectedValue]="selectedValue"\n        (changeEmitter)="onChange($event)"\n        (changeClickEmitter)="onClick($event)"\n      />\n    </div>\n  `\n})',...CustomMode.parameters?.docs?.source}}},LoadingState.parameters={...LoadingState.parameters,docs:{...LoadingState.parameters?.docs,source:{originalSource:'args => ({\n  component: LibAutocompleteComponent,\n  props: args,\n  template: `\n    <div style="width: 300px; margin: 20px;">\n      <input LibAutocomplete\n        [placeholder]="placeholder"\n        [loading]="loading"\n        [isCustom]="isCustom"\n        [suggestions]="suggestions"\n        [subSuggestions]="subSuggestions"\n        [tips]="tips"\n        [selectedValue]="selectedValue"\n        (changeEmitter)="onChange($event)"\n        (changeClickEmitter)="onClick($event)"\n      />\n    </div>\n  `\n})',...LoadingState.parameters?.docs?.source}}}}}]);