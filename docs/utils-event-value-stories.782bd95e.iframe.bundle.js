"use strict";(self.webpackChunkcomponents_angular=self.webpackChunkcomponents_angular||[]).push([[7509],{"./stories/utils/event-value.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{ArrayFilter:()=>ArrayFilter,ArrayFirst:()=>ArrayFirst,ArrayLast:()=>ArrayLast,ArrayMap:()=>ArrayMap,EventManagerBasic:()=>EventManagerBasic,EventManagerWithFilter:()=>EventManagerWithFilter,EventManagerWithIndex:()=>EventManagerWithIndex,__namedExportsOrder:()=>__namedExportsOrder,default:()=>event_value_stories});class EventValue{value;constructor(value){this.value=value}first(){return Array.isArray(this.value)?this.value[0]:this.value}last(){return Array.isArray(this.value)?this.value[this.value.length-1]:this.value}filter(predicate){return Array.isArray(this.value)?new EventValue(this.value.filter(predicate)):new EventValue(predicate(this.value)?this.value:[])}map(transform){return Array.isArray(this.value)?new EventValue(this.value.map(transform)):new EventValue([transform(this.value)])}valueOf(){return this.value}}class EventManager{events=new Map;currentEventId;currentDataIndex;currentFilter;eventId(id){return this.currentEventId=id,this}dataIndex(index){return this.currentDataIndex=index,this}filterMatch(value,pattern){return this.currentFilter={value,pattern},this}getEventValue(eventName){const value=this.events.get(eventName);return new EventValue(value)}setEventValue(eventName,value){return this.events.set(eventName,value),this}valueOf(context){if(void 0!==this.currentEventId){const event=this.events.get(this.currentEventId);if(!event)return;let result=event;return void 0!==this.currentDataIndex&&(result=Array.isArray(result)?result[this.currentDataIndex]:void 0),this.currentFilter&&Array.isArray(result)&&(result=result.filter((item=>String(item).includes(this.currentFilter.pattern)))),this.clear(),result}}clear(){return this.currentEventId=void 0,this.currentDataIndex=void 0,this.currentFilter=void 0,this}}var fesm2022_forms=__webpack_require__("./node_modules/@angular/forms/fesm2022/forms.mjs");const event_value_stories={title:"Utils/EventValue",tags:["autodocs"]},ArrayFirst={render:()=>({moduleMetadata:{imports:[fesm2022_forms.YN]},template:'\n      <div>\n        <h3>Array First Example</h3>\n        <div style="margin-bottom: 1rem;">\n          <label>Input array (comma separated):</label>\n          <input [(ngModel)]="inputArray" (ngModelChange)="updateResult()" style="width: 300px; margin-left: 10px;">\n        </div>\n        <p>First value: {{ firstValue }}</p>\n      </div>\n    ',props:{inputArray:"1,2,3,4,5",firstValue:"",updateResult(){const array=this.inputArray.split(",").map((x=>Number(x.trim())));this.firstValue=new EventValue(array).first()}}})},ArrayLast={render:()=>({moduleMetadata:{imports:[fesm2022_forms.YN]},template:'\n      <div>\n        <h3>Array Last Example</h3>\n        <div style="margin-bottom: 1rem;">\n          <label>Input array (comma separated):</label>\n          <input [(ngModel)]="inputArray" (ngModelChange)="updateResult()" style="width: 300px; margin-left: 10px;">\n        </div>\n        <p>Last value: {{ lastValue }}</p>\n      </div>\n    ',props:{inputArray:"1,2,3,4,5",lastValue:"",updateResult(){const array=this.inputArray.split(",").map((x=>Number(x.trim())));this.lastValue=new EventValue(array).last()}}})},ArrayFilter={render:()=>({moduleMetadata:{imports:[fesm2022_forms.YN]},template:'\n      <div>\n        <h3>Array Filter Example</h3>\n        <div style="margin-bottom: 1rem;">\n          <label>Input array (comma separated):</label>\n          <input [(ngModel)]="inputArray" (ngModelChange)="updateResult()" style="width: 300px; margin-left: 10px;">\n        </div>\n        <div style="margin-bottom: 1rem;">\n          <label>Filter condition (x > value):</label>\n          <input type="number" [(ngModel)]="filterValue" (ngModelChange)="updateResult()" style="width: 100px; margin-left: 10px;">\n        </div>\n        <p>Filtered values: {{ filteredValues }}</p>\n      </div>\n    ',props:{inputArray:"1,2,3,4,5",filterValue:3,filteredValues:"",updateResult(){const array=this.inputArray.split(",").map((x=>Number(x.trim())));this.filteredValues=new EventValue(array).filter((x=>x>this.filterValue)).valueOf()}}})},ArrayMap={render:()=>({moduleMetadata:{imports:[fesm2022_forms.YN]},template:'\n      <div>\n        <h3>Array Map Example</h3>\n        <div style="margin-bottom: 1rem;">\n          <label>Input array (comma separated):</label>\n          <input [(ngModel)]="inputArray" (ngModelChange)="updateResult()" style="width: 300px; margin-left: 10px;">\n        </div>\n        <div style="margin-bottom: 1rem;">\n          <label>Multiply by:</label>\n          <input type="number" [(ngModel)]="multiplier" (ngModelChange)="updateResult()" style="width: 100px; margin-left: 10px;">\n        </div>\n        <p>Mapped values: {{ mappedValues }}</p>\n      </div>\n    ',props:{inputArray:"1,2,3,4,5",multiplier:2,mappedValues:"",updateResult(){const array=this.inputArray.split(",").map((x=>Number(x.trim())));this.mappedValues=new EventValue(array).map((x=>x*this.multiplier)).valueOf()}}})},EventManagerBasic={render:()=>({moduleMetadata:{imports:[fesm2022_forms.YN]},template:'\n      <div>\n        <h3>EventManager Basic Example</h3>\n        <div style="margin-bottom: 1rem;">\n          <label>Event ID:</label>\n          <input type="number" [(ngModel)]="eventId" (ngModelChange)="updateResult()" style="width: 100px; margin-left: 10px;">\n        </div>\n        <div style="margin-bottom: 1rem;">\n          <label>Input array (comma separated):</label>\n          <input [(ngModel)]="inputArray" (ngModelChange)="updateResult()" style="width: 300px; margin-left: 10px;">\n        </div>\n        <p>Event Value: {{ eventValue }}</p>\n      </div>\n    ',props:{eventId:1,inputArray:"1,2,3,4,5",eventValue:"",updateResult(){const manager=new EventManager,array=this.inputArray.split(",").map((x=>Number(x.trim())));manager.setEventValue(this.eventId,array),this.eventValue=manager.getEventValue(this.eventId).valueOf()}}})},EventManagerWithFilter={render:()=>({moduleMetadata:{imports:[fesm2022_forms.YN]},template:'\n      <div>\n        <h3>EventManager With Filter Example</h3>\n        <div style="margin-bottom: 1rem;">\n          <label>Event ID:</label>\n          <input type="number" [(ngModel)]="eventId" (ngModelChange)="updateResult()" style="width: 100px; margin-left: 10px;">\n        </div>\n        <div style="margin-bottom: 1rem;">\n          <label>Input array (comma separated):</label>\n          <input [(ngModel)]="inputArray" (ngModelChange)="updateResult()" style="width: 300px; margin-left: 10px;">\n        </div>\n        <div style="margin-bottom: 1rem;">\n          <label>Filter pattern:</label>\n          <input [(ngModel)]="filterPattern" (ngModelChange)="updateResult()" style="width: 100px; margin-left: 10px;">\n        </div>\n        <p>Filtered Event Value: {{ filteredValue }}</p>\n      </div>\n    ',props:{eventId:1,inputArray:"apple,banana,orange",filterPattern:"a",filteredValue:"",updateResult(){const manager=new EventManager,array=this.inputArray.split(",").map((x=>x.trim()));manager.setEventValue(this.eventId,array),this.filteredValue=manager.eventId(this.eventId).filterMatch(array[0],this.filterPattern).valueOf({})}}})},EventManagerWithIndex={render:()=>({moduleMetadata:{imports:[fesm2022_forms.YN]},template:'\n      <div>\n        <h3>EventManager With Index Example</h3>\n        <div style="margin-bottom: 1rem;">\n          <label>Event ID:</label>\n          <input type="number" [(ngModel)]="eventId" (ngModelChange)="updateResult()" style="width: 100px; margin-left: 10px;">\n        </div>\n        <div style="margin-bottom: 1rem;">\n          <label>Input array (comma separated):</label>\n          <input [(ngModel)]="inputArray" (ngModelChange)="updateResult()" style="width: 300px; margin-left: 10px;">\n        </div>\n        <div style="margin-bottom: 1rem;">\n          <label>Index:</label>\n          <input type="number" [(ngModel)]="index" (ngModelChange)="updateResult()" style="width: 100px; margin-left: 10px;">\n        </div>\n        <p>Indexed Event Value: {{ indexedValue }}</p>\n      </div>\n    ',props:{eventId:1,inputArray:"1,2,3,4,5",index:2,indexedValue:"",updateResult(){const manager=new EventManager,array=this.inputArray.split(",").map((x=>Number(x.trim())));manager.setEventValue(this.eventId,array),this.indexedValue=manager.eventId(this.eventId).dataIndex(this.index).valueOf({})}}})},__namedExportsOrder=["ArrayFirst","ArrayLast","ArrayFilter","ArrayMap","EventManagerBasic","EventManagerWithFilter","EventManagerWithIndex"];ArrayFirst.parameters={...ArrayFirst.parameters,docs:{...ArrayFirst.parameters?.docs,source:{originalSource:'{\n  render: () => ({\n    moduleMetadata: {\n      imports: [FormsModule]\n    },\n    template: `\n      <div>\n        <h3>Array First Example</h3>\n        <div style="margin-bottom: 1rem;">\n          <label>Input array (comma separated):</label>\n          <input [(ngModel)]="inputArray" (ngModelChange)="updateResult()" style="width: 300px; margin-left: 10px;">\n        </div>\n        <p>First value: {{ firstValue }}</p>\n      </div>\n    `,\n    props: {\n      inputArray: \'1,2,3,4,5\',\n      firstValue: \'\',\n      updateResult() {\n        const array = this.inputArray.split(\',\').map((x: string) => Number(x.trim()));\n        this.firstValue = new EventValue(array).first();\n      }\n    }\n  })\n}',...ArrayFirst.parameters?.docs?.source}}},ArrayLast.parameters={...ArrayLast.parameters,docs:{...ArrayLast.parameters?.docs,source:{originalSource:'{\n  render: () => ({\n    moduleMetadata: {\n      imports: [FormsModule]\n    },\n    template: `\n      <div>\n        <h3>Array Last Example</h3>\n        <div style="margin-bottom: 1rem;">\n          <label>Input array (comma separated):</label>\n          <input [(ngModel)]="inputArray" (ngModelChange)="updateResult()" style="width: 300px; margin-left: 10px;">\n        </div>\n        <p>Last value: {{ lastValue }}</p>\n      </div>\n    `,\n    props: {\n      inputArray: \'1,2,3,4,5\',\n      lastValue: \'\',\n      updateResult() {\n        const array = this.inputArray.split(\',\').map((x: string) => Number(x.trim()));\n        this.lastValue = new EventValue(array).last();\n      }\n    }\n  })\n}',...ArrayLast.parameters?.docs?.source}}},ArrayFilter.parameters={...ArrayFilter.parameters,docs:{...ArrayFilter.parameters?.docs,source:{originalSource:'{\n  render: () => ({\n    moduleMetadata: {\n      imports: [FormsModule]\n    },\n    template: `\n      <div>\n        <h3>Array Filter Example</h3>\n        <div style="margin-bottom: 1rem;">\n          <label>Input array (comma separated):</label>\n          <input [(ngModel)]="inputArray" (ngModelChange)="updateResult()" style="width: 300px; margin-left: 10px;">\n        </div>\n        <div style="margin-bottom: 1rem;">\n          <label>Filter condition (x > value):</label>\n          <input type="number" [(ngModel)]="filterValue" (ngModelChange)="updateResult()" style="width: 100px; margin-left: 10px;">\n        </div>\n        <p>Filtered values: {{ filteredValues }}</p>\n      </div>\n    `,\n    props: {\n      inputArray: \'1,2,3,4,5\',\n      filterValue: 3,\n      filteredValues: \'\',\n      updateResult() {\n        const array = this.inputArray.split(\',\').map((x: string) => Number(x.trim()));\n        this.filteredValues = new EventValue(array).filter((x: number) => x > this.filterValue).valueOf();\n      }\n    }\n  })\n}',...ArrayFilter.parameters?.docs?.source}}},ArrayMap.parameters={...ArrayMap.parameters,docs:{...ArrayMap.parameters?.docs,source:{originalSource:'{\n  render: () => ({\n    moduleMetadata: {\n      imports: [FormsModule]\n    },\n    template: `\n      <div>\n        <h3>Array Map Example</h3>\n        <div style="margin-bottom: 1rem;">\n          <label>Input array (comma separated):</label>\n          <input [(ngModel)]="inputArray" (ngModelChange)="updateResult()" style="width: 300px; margin-left: 10px;">\n        </div>\n        <div style="margin-bottom: 1rem;">\n          <label>Multiply by:</label>\n          <input type="number" [(ngModel)]="multiplier" (ngModelChange)="updateResult()" style="width: 100px; margin-left: 10px;">\n        </div>\n        <p>Mapped values: {{ mappedValues }}</p>\n      </div>\n    `,\n    props: {\n      inputArray: \'1,2,3,4,5\',\n      multiplier: 2,\n      mappedValues: \'\',\n      updateResult() {\n        const array = this.inputArray.split(\',\').map((x: string) => Number(x.trim()));\n        this.mappedValues = new EventValue(array).map((x: number) => x * this.multiplier).valueOf();\n      }\n    }\n  })\n}',...ArrayMap.parameters?.docs?.source}}},EventManagerBasic.parameters={...EventManagerBasic.parameters,docs:{...EventManagerBasic.parameters?.docs,source:{originalSource:'{\n  render: () => ({\n    moduleMetadata: {\n      imports: [FormsModule]\n    },\n    template: `\n      <div>\n        <h3>EventManager Basic Example</h3>\n        <div style="margin-bottom: 1rem;">\n          <label>Event ID:</label>\n          <input type="number" [(ngModel)]="eventId" (ngModelChange)="updateResult()" style="width: 100px; margin-left: 10px;">\n        </div>\n        <div style="margin-bottom: 1rem;">\n          <label>Input array (comma separated):</label>\n          <input [(ngModel)]="inputArray" (ngModelChange)="updateResult()" style="width: 300px; margin-left: 10px;">\n        </div>\n        <p>Event Value: {{ eventValue }}</p>\n      </div>\n    `,\n    props: {\n      eventId: 1,\n      inputArray: \'1,2,3,4,5\',\n      eventValue: \'\',\n      updateResult() {\n        const manager = new EventManager();\n        const array = this.inputArray.split(\',\').map((x: string) => Number(x.trim()));\n        manager.setEventValue(this.eventId, array);\n        this.eventValue = manager.getEventValue(this.eventId).valueOf();\n      }\n    }\n  })\n}',...EventManagerBasic.parameters?.docs?.source}}},EventManagerWithFilter.parameters={...EventManagerWithFilter.parameters,docs:{...EventManagerWithFilter.parameters?.docs,source:{originalSource:'{\n  render: () => ({\n    moduleMetadata: {\n      imports: [FormsModule]\n    },\n    template: `\n      <div>\n        <h3>EventManager With Filter Example</h3>\n        <div style="margin-bottom: 1rem;">\n          <label>Event ID:</label>\n          <input type="number" [(ngModel)]="eventId" (ngModelChange)="updateResult()" style="width: 100px; margin-left: 10px;">\n        </div>\n        <div style="margin-bottom: 1rem;">\n          <label>Input array (comma separated):</label>\n          <input [(ngModel)]="inputArray" (ngModelChange)="updateResult()" style="width: 300px; margin-left: 10px;">\n        </div>\n        <div style="margin-bottom: 1rem;">\n          <label>Filter pattern:</label>\n          <input [(ngModel)]="filterPattern" (ngModelChange)="updateResult()" style="width: 100px; margin-left: 10px;">\n        </div>\n        <p>Filtered Event Value: {{ filteredValue }}</p>\n      </div>\n    `,\n    props: {\n      eventId: 1,\n      inputArray: \'apple,banana,orange\',\n      filterPattern: \'a\',\n      filteredValue: \'\',\n      updateResult() {\n        const manager = new EventManager();\n        const array = this.inputArray.split(\',\').map((x: string) => x.trim());\n        manager.setEventValue(this.eventId, array);\n        this.filteredValue = manager.eventId(this.eventId).filterMatch(array[0], this.filterPattern).valueOf({});\n      }\n    }\n  })\n}',...EventManagerWithFilter.parameters?.docs?.source}}},EventManagerWithIndex.parameters={...EventManagerWithIndex.parameters,docs:{...EventManagerWithIndex.parameters?.docs,source:{originalSource:'{\n  render: () => ({\n    moduleMetadata: {\n      imports: [FormsModule]\n    },\n    template: `\n      <div>\n        <h3>EventManager With Index Example</h3>\n        <div style="margin-bottom: 1rem;">\n          <label>Event ID:</label>\n          <input type="number" [(ngModel)]="eventId" (ngModelChange)="updateResult()" style="width: 100px; margin-left: 10px;">\n        </div>\n        <div style="margin-bottom: 1rem;">\n          <label>Input array (comma separated):</label>\n          <input [(ngModel)]="inputArray" (ngModelChange)="updateResult()" style="width: 300px; margin-left: 10px;">\n        </div>\n        <div style="margin-bottom: 1rem;">\n          <label>Index:</label>\n          <input type="number" [(ngModel)]="index" (ngModelChange)="updateResult()" style="width: 100px; margin-left: 10px;">\n        </div>\n        <p>Indexed Event Value: {{ indexedValue }}</p>\n      </div>\n    `,\n    props: {\n      eventId: 1,\n      inputArray: \'1,2,3,4,5\',\n      index: 2,\n      indexedValue: \'\',\n      updateResult() {\n        const manager = new EventManager();\n        const array = this.inputArray.split(\',\').map((x: string) => Number(x.trim()));\n        manager.setEventValue(this.eventId, array);\n        this.indexedValue = manager.eventId(this.eventId).dataIndex(this.index).valueOf({});\n      }\n    }\n  })\n}',...EventManagerWithIndex.parameters?.docs?.source}}}}}]);